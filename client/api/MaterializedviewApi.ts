/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class MaterializedviewApi {
    protected basePath = 'https://app.rakam.io/';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Create view
     * 
     * @param materializedView 
     */
    public createView (materializedView: models.MaterializedView, extraHttpRequestParams?: any ) : Observable<models.SuccessMessage> {
        const path = this.basePath + '/materialized-view/create';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'materializedView' is not null or undefined
        if (materializedView === null || materializedView === undefined) {
            throw new Error('Required parameter materializedView was null or undefined when calling createView.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(materializedView);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete materialized view
     * 
     * @param materializedViewDeleteView 
     */
    public deleteView (materializedViewDeleteView: models.MaterializedViewDeleteView, extraHttpRequestParams?: any ) : Observable<models.SuccessMessage> {
        const path = this.basePath + '/materialized-view/delete';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'materializedViewDeleteView' is not null or undefined
        if (materializedViewDeleteView === null || materializedViewDeleteView === undefined) {
            throw new Error('Required parameter materializedViewDeleteView was null or undefined when calling deleteView.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(materializedViewDeleteView);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get schemas
     * 
     * @param materializedViewGetSchemaOfView 
     */
    public getSchemaOfView (materializedViewGetSchemaOfView: models.MaterializedViewGetSchemaOfView, extraHttpRequestParams?: any ) : Observable<Array<models.MaterializedViewSchema>> {
        const path = this.basePath + '/materialized-view/schema';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'materializedViewGetSchemaOfView' is not null or undefined
        if (materializedViewGetSchemaOfView === null || materializedViewGetSchemaOfView === undefined) {
            throw new Error('Required parameter materializedViewGetSchemaOfView was null or undefined when calling getSchemaOfView.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(materializedViewGetSchemaOfView);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get view
     * 
     * @param materializedViewGetView 
     */
    public getView (materializedViewGetView: models.MaterializedViewGetView, extraHttpRequestParams?: any ) : Observable<models.MaterializedView> {
        const path = this.basePath + '/materialized-view/get';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'materializedViewGetView' is not null or undefined
        if (materializedViewGetView === null || materializedViewGetView === undefined) {
            throw new Error('Required parameter materializedViewGetView was null or undefined when calling getView.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(materializedViewGetView);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * List views
     * 
     */
    public listViews (extraHttpRequestParams?: any ) : Observable<Array<models.MaterializedView>> {
        const path = this.basePath + '/materialized-view/list';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
