/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class AdminApi {
    protected basePath = 'https://app.rakam.io/';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Add fields to collections by transforming other schemas
     * 
     * @param projectAddCustomFieldsToSchema 
     */
    public addCustomFieldsToSchema (projectAddCustomFieldsToSchema: models.ProjectAddCustomFieldsToSchema, extraHttpRequestParams?: any ) : Observable<Array<models.SchemaField>> {
        const path = this.basePath + '/project/schema/add/custom';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projectAddCustomFieldsToSchema' is not null or undefined
        if (projectAddCustomFieldsToSchema === null || projectAddCustomFieldsToSchema === undefined) {
            throw new Error('Required parameter projectAddCustomFieldsToSchema was null or undefined when calling addCustomFieldsToSchema.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(projectAddCustomFieldsToSchema);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Add fields to collections
     * 
     * @param projectAddFieldsToSchema 
     */
    public addFieldsToSchema (projectAddFieldsToSchema: models.ProjectAddFieldsToSchema, extraHttpRequestParams?: any ) : Observable<Array<models.SchemaField>> {
        const path = this.basePath + '/project/schema/add';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projectAddFieldsToSchema' is not null or undefined
        if (projectAddFieldsToSchema === null || projectAddFieldsToSchema === undefined) {
            throw new Error('Required parameter projectAddFieldsToSchema was null or undefined when calling addFieldsToSchema.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(projectAddFieldsToSchema);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create API Keys
     * 
     * @param projectCheckApiKeys 
     */
    public checkApiKeys (projectCheckApiKeys: models.ProjectCheckApiKeys, extraHttpRequestParams?: any ) : Observable<Array<boolean>> {
        const path = this.basePath + '/project/check-api-keys';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projectCheckApiKeys' is not null or undefined
        if (projectCheckApiKeys === null || projectCheckApiKeys === undefined) {
            throw new Error('Required parameter projectCheckApiKeys was null or undefined when calling checkApiKeys.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(projectCheckApiKeys);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Check lock key
     * 
     * @param checkLockKey 
     */
    public checkLockKey (checkLockKey: models.CheckLockKey, extraHttpRequestParams?: any ) : Observable<boolean> {
        const path = this.basePath + '/admin/lock_key';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'checkLockKey' is not null or undefined
        if (checkLockKey === null || checkLockKey === undefined) {
            throw new Error('Required parameter checkLockKey was null or undefined when calling checkLockKey.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(checkLockKey);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get collection names
     * 
     */
    public collections (extraHttpRequestParams?: any ) : Observable<Array<string>> {
        const path = this.basePath + '/project/collection';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create API Keys
     * 
     */
    public createApiKeys (extraHttpRequestParams?: any ) : Observable<models.ProjectApiKeys> {
        const path = this.basePath + '/project/create-api-keys';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create project
     * 
     * @param createProject 
     */
    public createProject (createProject: models.CreateProject, extraHttpRequestParams?: any ) : Observable<models.ProjectApiKeys> {
        const path = this.basePath + '/project/create';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'createProject' is not null or undefined
        if (createProject === null || createProject === undefined) {
            throw new Error('Required parameter createProject was null or undefined when calling createProject.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(createProject);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete project
     * 
     */
    public deleteProject (extraHttpRequestParams?: any ) : Observable<models.SuccessMessage> {
        const path = this.basePath + '/project/delete';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * List installed modules
     * 
     */
    public getConfigurations (extraHttpRequestParams?: any ) : Observable<Array<models.ModuleDescriptor>> {
        const path = this.basePath + '/admin/configurations';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * List created projects
     * 
     */
    public getProjects (extraHttpRequestParams?: any ) : Observable<Array<string>> {
        const path = this.basePath + '/project/list';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get project stats
     * 
     * @param projectGetStats 
     */
    public getStats (projectGetStats: models.ProjectGetStats, extraHttpRequestParams?: any ) : Observable<{ [key: string]: models.Stats; }> {
        const path = this.basePath + '/project/stats';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projectGetStats' is not null or undefined
        if (projectGetStats === null || projectGetStats === undefined) {
            throw new Error('Required parameter projectGetStats was null or undefined when calling getStats.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(projectGetStats);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get types
     * 
     */
    public getTypes (extraHttpRequestParams?: any ) : Observable<{ [key: string]: string; }> {
        const path = this.basePath + '/admin/types';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Revoke API Keys
     * 
     * @param masterKey 
     */
    public revokeApiKeys (masterKey: string, extraHttpRequestParams?: any ) : Observable<models.SuccessMessage> {
        const path = this.basePath + '/project/revoke-api-keys';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'masterKey' is not null or undefined
        if (masterKey === null || masterKey === undefined) {
            throw new Error('Required parameter masterKey was null or undefined when calling revokeApiKeys.');
        }
            headerParams.set('master_key', masterKey);

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get collection schema
     * 
     * @param projectSchema 
     */
    public schema (projectSchema: models.ProjectSchema, extraHttpRequestParams?: any ) : Observable<Array<models.Collection>> {
        const path = this.basePath + '/project/schema';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projectSchema' is not null or undefined
        if (projectSchema === null || projectSchema === undefined) {
            throw new Error('Required parameter projectSchema was null or undefined when calling schema.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(projectSchema);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
