/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class EventexplorerApi {
    protected basePath = 'https://app.rakam.io/';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Perform simple query on event data
     * 
     * @param analyzeRequest 
     */
    public analyzeEvents (analyzeRequest: models.AnalyzeRequest, extraHttpRequestParams?: any ) : Observable<models.QueryResult> {
        const path = this.basePath + '/event-explorer/analyze';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'analyzeRequest' is not null or undefined
        if (analyzeRequest === null || analyzeRequest === undefined) {
            throw new Error('Required parameter analyzeRequest was null or undefined when calling analyzeEvents.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(analyzeRequest);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create Pre-computed table
     * 
     * @param createPrecomputedTable 
     */
    public createPrecomputedTable (createPrecomputedTable: models.CreatePrecomputedTable, extraHttpRequestParams?: any ) : Observable<models.PrecalculatedTable> {
        const path = this.basePath + '/event-explorer/pre_calculate';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'createPrecomputedTable' is not null or undefined
        if (createPrecomputedTable === null || createPrecomputedTable === undefined) {
            throw new Error('Required parameter createPrecomputedTable was null or undefined when calling createPrecomputedTable.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(createPrecomputedTable);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Event statistics
     * 
     * @param eventExplorerGetEventStatistics 
     */
    public getEventStatistics (eventExplorerGetEventStatistics: models.EventExplorerGetEventStatistics, extraHttpRequestParams?: any ) : Observable<models.QueryResult> {
        const path = this.basePath + '/event-explorer/statistics';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eventExplorerGetEventStatistics' is not null or undefined
        if (eventExplorerGetEventStatistics === null || eventExplorerGetEventStatistics === undefined) {
            throw new Error('Required parameter eventExplorerGetEventStatistics was null or undefined when calling getEventStatistics.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(eventExplorerGetEventStatistics);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Event statistics
     * 
     */
    public getExtraDimensions (extraHttpRequestParams?: any ) : Observable<{ [key: string]: Array<string>; }> {
        const path = this.basePath + '/event-explorer/extra_dimensions';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
