/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class ContinuousqueryApi {
    protected basePath = 'https://app.rakam.io/';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Create stream
     * Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
     * @param continuousQuery 
     */
    public createQuery (continuousQuery: models.ContinuousQuery, extraHttpRequestParams?: any ) : Observable<models.SuccessMessage> {
        const path = this.basePath + '/continuous-query/create';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'continuousQuery' is not null or undefined
        if (continuousQuery === null || continuousQuery === undefined) {
            throw new Error('Required parameter continuousQuery was null or undefined when calling createQuery.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(continuousQuery);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete stream
     * 
     * @param continuousQueryDeleteQuery 
     */
    public deleteQuery (continuousQueryDeleteQuery: models.ContinuousQueryDeleteQuery, extraHttpRequestParams?: any ) : Observable<models.SuccessMessage> {
        const path = this.basePath + '/continuous-query/delete';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'continuousQueryDeleteQuery' is not null or undefined
        if (continuousQueryDeleteQuery === null || continuousQueryDeleteQuery === undefined) {
            throw new Error('Required parameter continuousQueryDeleteQuery was null or undefined when calling deleteQuery.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(continuousQueryDeleteQuery);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get continuous query
     * 
     * @param continuousQueryGetQuery 
     */
    public getQuery (continuousQueryGetQuery: models.ContinuousQueryGetQuery, extraHttpRequestParams?: any ) : Observable<models.ContinuousQuery> {
        const path = this.basePath + '/continuous-query/get';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'continuousQueryGetQuery' is not null or undefined
        if (continuousQueryGetQuery === null || continuousQueryGetQuery === undefined) {
            throw new Error('Required parameter continuousQueryGetQuery was null or undefined when calling getQuery.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(continuousQueryGetQuery);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get query schema
     * 
     * @param continuousQueryGetSchemaOfQuery 
     */
    public getSchemaOfQuery (continuousQueryGetSchemaOfQuery: models.ContinuousQueryGetSchemaOfQuery, extraHttpRequestParams?: any ) : Observable<Array<models.Collection>> {
        const path = this.basePath + '/continuous-query/schema';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'continuousQueryGetSchemaOfQuery' is not null or undefined
        if (continuousQueryGetSchemaOfQuery === null || continuousQueryGetSchemaOfQuery === undefined) {
            throw new Error('Required parameter continuousQueryGetSchemaOfQuery was null or undefined when calling getSchemaOfQuery.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(continuousQueryGetSchemaOfQuery);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * List queries
     * 
     */
    public listQueries (extraHttpRequestParams?: any ) : Observable<Array<models.ContinuousQuery>> {
        const path = this.basePath + '/continuous-query/list';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Test continuous query
     * 
     * @param continuousQueryTestQuery 
     */
    public testQuery (continuousQueryTestQuery: models.ContinuousQueryTestQuery, extraHttpRequestParams?: any ) : Observable<boolean> {
        const path = this.basePath + '/continuous-query/test';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'continuousQueryTestQuery' is not null or undefined
        if (continuousQueryTestQuery === null || continuousQueryTestQuery === undefined) {
            throw new Error('Required parameter continuousQueryTestQuery was null or undefined when calling testQuery.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(continuousQueryTestQuery);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
