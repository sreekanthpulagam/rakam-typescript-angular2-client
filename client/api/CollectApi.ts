/**
 * Rakam API Documentation
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class CollectApi {
    protected basePath = 'https://app.rakam.io/';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Collect multiple events
     * Returns 1 if the events are collected.
     * @param eventList 
     */
    public batchEvents (eventList: models.EventList, extraHttpRequestParams?: any ) : Observable<number> {
        const path = this.basePath + '/event/batch';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eventList' is not null or undefined
        if (eventList === null || eventList === undefined) {
            throw new Error('Required parameter eventList was null or undefined when calling batchEvents.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(eventList);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Collect Bulk events
     * Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set &#39;collection&#39; and &#39;master_key&#39; query parameters if the content-type is not application/json.
     * @param eventList 
     */
    public bulkEvents (eventList: models.EventList, extraHttpRequestParams?: any ) : Observable<models.SuccessMessage> {
        const path = this.basePath + '/event/bulk';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'eventList' is not null or undefined
        if (eventList === null || eventList === undefined) {
            throw new Error('Required parameter eventList was null or undefined when calling bulkEvents.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(eventList);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Collect bulk events from remote
     * 
     * @param bulkEventRemote 
     */
    public bulkEventsRemote (bulkEventRemote: models.BulkEventRemote, extraHttpRequestParams?: any ) : Observable<number> {
        const path = this.basePath + '/event/bulk/remote';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'bulkEventRemote' is not null or undefined
        if (bulkEventRemote === null || bulkEventRemote === undefined) {
            throw new Error('Required parameter bulkEventRemote was null or undefined when calling bulkEventsRemote.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(bulkEventRemote);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Collect event
     * 
     * @param event 
     */
    public collectEvent (event: models.Event, extraHttpRequestParams?: any ) : Observable<number> {
        const path = this.basePath + '/event/collect';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'event' is not null or undefined
        if (event === null || event === undefined) {
            throw new Error('Required parameter event was null or undefined when calling collectEvent.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(event);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Commit Bulk events
     * 
     * @param commitBulkEvents 
     */
    public commitBulkEvents (commitBulkEvents: models.CommitBulkEvents, extraHttpRequestParams?: any ) : Observable<models.SuccessMessage> {
        const path = this.basePath + '/event/bulk/commit';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'commitBulkEvents' is not null or undefined
        if (commitBulkEvents === null || commitBulkEvents === undefined) {
            throw new Error('Required parameter commitBulkEvents was null or undefined when calling commitBulkEvents.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(commitBulkEvents);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
